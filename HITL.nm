mdp
const int Feng=2;//=1;// 1=use Feng model, 2=do NOT use Feng model
//Deterministic: 1=noBreak, 2=alwaysBreak
//Nondeterministic: 3=probabilistic when model is DTMC, 3=nondeterministic when model is MDP
const int breakPolicy=1;//1=noBreak, 2=alwaysBreak (called deterministic in paper), 3=probabilistic, 4=nondeterministically resolve break
const int breakDiscountKPolicy=1;//1->newK=1, 2->newK=fThLow, 3->newK=fThAverage
const int mission=1;//;// = 2; //1=visit all waypoints, 2=visit w2,w5,w6, 3=visit w1,w2,w6
const int FatModel=2;//1= UAVModel=true, 2=UAVModel=false
const int WLModel=1;//1= MyWLModel=false, 2=MyWLModel=true
//const int noBreak;//1=no break, 2=break
const double AccHighLoad=0.5;//accuracy at high load. if =1 use formula (low=0.5*high), otherwise take it as input from user
const int loadPattern=2;//1=mostly low load, 2=mostly medium load, 3=mostly high load
const int ignoreTaskOpEffect=1;//1=ignore task/operator type effect, 2= three task types and 2 op types

formula FengFatigueModel = (Feng=1)?1:FatModel;
formula FengWLModel = (Feng=1)?1:WLModel;
//formula breakModel = (Feng=1)?2:noBreak;
formula taskOpEffect = (Feng=1)?1:ignoreTaskOpEffect;

formula UAVModel = (FengFatigueModel=1)?true:false;//if true, simulates fatigue discount as a step function of UAV paper with 2 angle points. My fatigue linearly increases.
formula MyWLModel = (FengWLModel=1)?false:true; //if true, uses my workload update model DTMC, otherwise uses UAV model (50% high, 50% low workload)
//formula break=(Feng=1 | noBreak=1)?false:true; //break is taken to relax

const double accu_loadLow=0.9; // a_p: proficiency: accuracy at the low workload level (real numbers between 0 and 1)
const double accu_loadMed=(accu_loadLow+accu_loadHigh)/2;
const double accu_loadHigh=(AccHighLoad=1)?accu_loadLow*0.5:AccHighLoad;

// operator parameters
const int age=1; //1=young (20-30), 2=middle (31-40), 3=old (41-60), as this number increases performance should deteriorate
const int exp=1; //1=Experience: (5+ years), 2=moderate (1-3), 3=no experience (0 years), as this number increases performance should deteriorate
formula ageDiscount = (Feng=1)?1:((age=1)?1:((age=2)?0.8:0.6));
formula expDiscount = (Feng=1)?1:((exp=1)?1:((exp=2)?0.75:0.5));

const int taskType=1; //cognitive psychomotor visual detection task: 1=updating, 2=set shifting, 3=inhibition
const int opType=1; //1=introvert vs 2=extrovert. they behave differently on different task types
const double opTaskDiscount=0.7;//based on task type and operator type apply this discount
//introverts overall perform better on set shifting tasks whereas extroverts performs better on inhibition and updating tasks
formula opTypeDiscountTmp = ((opType=1&taskType=2)?1:((opType=2&(taskType=1|taskType=3))?1:opTaskDiscount));
formula opTypeDiscount = (taskOpEffect=1)?1:opTypeDiscountTmp;

const int breakWaitTime=30;// breakWaitTime > nonBreakWaitTime
const int nonBreakWaitTime=10;
const int flyTime=60;

//ensure that sum of pij for all j = 1
const double plow=0.05; const double phigh=0.7;
const int lowL=1; const int medL=2; const int highL=3;
formula pll = (loadPattern=lowL)? 0.7: ((loadPattern=medL)? 0.25: 0.05);
formula plm = (loadPattern=lowL)? 0.25: ((loadPattern=medL)? 0.7: 0.25);
formula plh = (loadPattern=lowL)? 0.05: ((loadPattern=medL)? 0.05: 0.7);
formula pmm = (loadPattern=lowL)? 0.25: ((loadPattern=medL)? 0.7: 0.25);
formula pml = (loadPattern=lowL)? 0.7: ((loadPattern=medL)? 0.15: 0.05);
formula pmh = (loadPattern=lowL)? 0.05: ((loadPattern=medL)? 0.15: 0.7);
formula phh = (loadPattern=lowL)? 0.05: ((loadPattern=medL)? 0.25: 0.7);
formula phm = (loadPattern=lowL)? 0.25: ((loadPattern=medL)? 0.7: 0.25);
formula phl = (loadPattern=lowL)? 0.7: ((loadPattern=medL)? 0.05: 0.05);


const double risky2=0.5; // at w2: probability of choosing a risky route
const double risky6=0.5; // at w6: probability of choosing a risky route

global stop : bool init false; // done visiting all waypoints
formula roz = (r=8) | (w=3&a=1) | (w=3&a=2) | (w=5&a=2); // restricted operating zones
formula visitAll = w1 & w2 & w3 & w4 & w5 & w6;//mission1
formula visit256 = w2 & w5 & w6;//mission2
formula visit126 = w1 & w2 & w6;//mission3 for pereto curve

formula accu_load1tmp = min(accu_loadLow, accu_loadLow*ageDiscount*expDiscount*opTypeDiscount);
formula accu_load2tmp = min(accu_loadMed, accu_loadMed*ageDiscount*expDiscount*opTypeDiscount);
formula accu_load3tmp = min(accu_loadHigh, accu_loadHigh*ageDiscount*expDiscount*opTypeDiscount);
//since breakDiscount is +ve discount, we should use it separately to choose max value
formula accu_load1 = (break)?min(1,accu_load1tmp*breakDiscount):accu_load1tmp;
formula accu_load2 = (break)?min(1,accu_load2tmp*breakDiscount):accu_load2tmp;
formula accu_load3 = (break)?min(1,accu_load3tmp*breakDiscount):accu_load3tmp;


//fatigue discount, should be sigmoid (const. high --> -ve slope --> const. low)
//Fatigue discount = 1 (when k <= fThLow),
//		   = 3/4+(N*fThLow - k)/(4*fThLow) (when k is between fThLow to N*fThLow)
//		   = 0.75 (when k > N*fThLow) - platue behavior


//const int fThLow1; // fatigue STARTING point (<fThHigh), after this break may be taken
////const int fThLow=0; // for simulating UAV paper model
//formula fThLow = (UAVModel?0:fThLow1);
//const int N=2; //multiplier factor for fatighe Threshold High, DON'T USE N
////formula fThHigh=N*fThLow; //after this threshold, discount platues, no need to increment k after this.
//const int fThHigh1; //for simulating UAV paper model
//formula fThHigh = (UAVModel?fThHigh1:N*fThLow);//seems like an error when fThLow=0, it makes fThHigh=0
//when we use N, use the following, but we are not using N anymore
//formula fDisc2 = (k<fThLow)?1:((k<fThHigh)?(maxFDiscount+(1-maxFDiscount)*(fThHigh-k-1)/(fThLow*(N-1))):(maxFDiscount));

const int fThLow;//=0;//we removed N, so there is no fix relationship except fThLow<=fThHigh
const int fThHigh;//=5;

const double maxFDiscount;//=0.5;// = 0.1;//after fThHigh, platue behavior occurs
formula fDiscMy = (k<=fThLow)?1:((k<fThHigh)?(maxFDiscount+(1-maxFDiscount)*(fThHigh-k-1)/(fThHigh-fThLow)):(maxFDiscount));
//formula fDiscUAV = (k<=fThHigh)?1:maxFDiscount;//for comparison with UAV paper, set fThLow=0
formula fDiscUAV = (k<=fThLow)?1:maxFDiscount;//for breakDiscount effect, changing UAV fatigue model
formula fDisc = (UAVModel?fDiscUAV:fDiscMy);
formula fatDisc = min(1, fDisc);

//if break=true, then set k to some lesser value e.g. k=(fThHigh-fThLow)/2
formula newK = (breakDiscountKPolicy=1)?1:((breakDiscountKPolicy=2)?fThLow:floor((fThHigh+fThLow)/2));
//formula newK = fThLow;

const int sleepSchedule = 1; //1 or 2
formula sleepScheduleDiscount = (Feng=1)?1:((sleepSchedule=1)?1:0.9);
const int shift = 1;//1, 2, or 3 (three shifts: morning, evening, night)
formula shiftDiscount = (Feng=1)?1:((shift=1)?1:((shift=2)?0.9:0.8));
formula fd = sleepScheduleDiscount*shiftDiscount*fatDisc;

formula numBreaks = 0; //number of breaks
//accuracy increases or update it in operator by decreasing k by some percentage ? 
//break is taken, k is multiple of fThLow and break is ineffective after fThHigh
//formula breakDiscount = (break & k>0 & k<=fThHigh & mod(k,fThLow)=0)? true:false;
//****************************
//for k=fThLow to fThHigh, breakDiscount varies from 1.4 to 1

//when we take short activity break, then overall time is wasted, but efficiency for later work is improved so time is saved
//so here we have two competing situations, that needs to be resolved via nondeterministically chosing break policy
//so instead of taking break decision via external variable, lets define it as follows:
//if break is taken then apply break discount all the way from fThLow to fThHigh, but add a delay of break
//if break is not taken then don't apply break discount (discount=1) and don't add any delay.

//const double brDiscount=1.4;// = 1.4; //break discount (bd>1), 40% increase in accuracy
//handling break in 'fd' by reducing the value of k after k>fThHigh in fDiscMy
formula breakDiscount = 1;
//formula breakDiscount = (break & k>=fThLow & k<fThHigh)? ((fThHigh-k)*(brDiscount-1)/(fThHigh-fThLow)+1): 1;
formula bdKvalue = max(1, floor(k*0.8)); //new k value due to break discount //not using right now

// OPERATOR MODEL
module operator
	
	k:[0..fThHigh+1] init 0; // fatigue level measured by completed tasks
	cwl:[0..3] init 1; // current workload, 1=low, 2=medium, 3=high
	s:[0..2] init 0; // status of image processing, 0: init, 1: good, 2: bad
	c:[0..3] init 0; // choices at the check point
	wt:[0..3] init 1; // work type
        begin: bool init true; //to execute [image] as the first thing to execute once
        begin1: bool init true; //to execute [workType] once after [image]
	breakDecision: bool init false;
	break: bool init false;


//Deterministic break policy
	[] !stop & breakPolicy=1 & !breakDecision & begin & s=0 -> (breakDecision'=true) & (break'=false);//no break
	[] !stop & breakPolicy=2 & !breakDecision & begin & s=0 -> (breakDecision'=true) & (break'=true);//always break
	[] !stop & breakPolicy=3 & !breakDecision & begin & s=0 -> 0.5:(breakDecision'=true) & (break'=true)+
								0.5:(breakDecision'=true) & (break'=false);//probabilistic
//Nondeterministic break policy
	[] !stop & breakPolicy=4 & !breakDecision & begin & s=0 -> (breakDecision'=true) & (break'=false);
	[] !stop & breakPolicy=4 & !breakDecision & begin & s=0 -> (breakDecision'=true) & (break'=true);

//Choose one of the following workload update methods:
//1)Workload update among low, medium, and high via DTMC
	// image processing, the workload may increase due to other unknown tasks
	[image] !stop & breakDecision & MyWLModel & begin & cwl=1 & s=0 -> pll:(cwl'=1) & (s'=0) & (begin'=false) + plm:(cwl'=2) & (s'=0) & (begin'=false) + plh:(cwl'=3) & (s'=0) & (begin'=false);
	[image] !stop & breakDecision & MyWLModel & begin & cwl=2 & s=0 -> pml:(cwl'=1) & (s'=0) & (begin'=false) + pmm:(cwl'=2) & (s'=0) & (begin'=false) + pmh:(cwl'=3) & (s'=0) & (begin'=false);
	[image] !stop & breakDecision & MyWLModel & begin & cwl=3 & s=0 -> phl:(cwl'=1) & (s'=0) & (begin'=false) + phm:(cwl'=2) & (s'=0) & (begin'=false) + phh:(cwl'=3) & (s'=0) & (begin'=false);
//2) Workload update b/w low and high via uniform distribution of 0.5	
	[image] !stop & breakDecision & !MyWLModel & begin & s=0 -> 0.5:(cwl'=1) & (s'=0) & (begin'=false) + 0.5:(cwl'=3) & (s'=0) & (begin'=false);

//decide work type update based on DTMC
	[workType] !stop & !begin & begin1 & s=0 & wt=1 -> 0.8:(wt'=1) & (begin1'=false) + 0.1:(wt'=2) & (begin1'=false) + 0.1:(wt'=3) & (begin1'=false);
	[workType] !stop & !begin & begin1 & s=0 & wt=2 -> 0.8:(wt'=2) & (begin1'=false) + 0.1:(wt'=1) & (begin1'=false) + 0.1:(wt'=3) & (begin1'=false);
	[workType] !stop & !begin & begin1 & s=0 & wt=3 -> 0.8:(wt'=3) & (begin1'=false) + 0.1:(wt'=1) & (begin1'=false) + 0.1:(wt'=2) & (begin1'=false);

	// not fatigue, workload level 1
	[process] !stop & !begin1 & cwl=1 & s=0 & k<=fThHigh -> accu_load1*fd:(s'=1)&(k'=k+1) + (1-accu_load1*fd):(s'=2)&(k'=k+1);
	// fatigue, workload level 1
	[process] !stop & !begin1 & cwl=1 & s=0 & k>fThHigh & break -> accu_load1*fd:(s'=1)&(breakDecision'=false)&(k'=newK) + 
									(1-accu_load1*fd):(s'=2)&(breakDecision'=false)&(k'=newK);
	[process] !stop & !begin1 & cwl=1 & s=0 & k>fThHigh & !break -> accu_load1*fd:(s'=1)&(breakDecision'=false) + 
									(1-accu_load1*fd):(s'=2)&(breakDecision'=false);

	// not fatigue, workload level 2
	[process] !stop & !begin1 & cwl=2 & s=0 & k<=fThHigh -> accu_load2*fd:(s'=1)&(k'=k+1) + (1-accu_load2*fd):(s'=2)&(k'=k+1);
	// fatigue, workload level 2
	[process] !stop & !begin1 & cwl=2 & s=0 & k>fThHigh & break -> accu_load2*fd:(s'=1)&(breakDecision'=false)&(k'=newK) + 
									(1-accu_load2*fd):(s'=2)&(breakDecision'=false)&(k'=newK);
	[process] !stop & !begin1 & cwl=2 & s=0 & k>fThHigh & !break -> accu_load2*fd:(s'=1)&(breakDecision'=false) + 
									(1-accu_load2*fd):(s'=2)&(breakDecision'=false);

	// not fatigue, workload level 3
	[process] !stop & !begin1 & cwl=3 & s=0 & k<=fThHigh -> accu_load3*fd:(s'=1)&(k'=k+1) + (1-accu_load3*fd):(s'=2)&(k'=k+1);
	// fatigue, workload level 3
	[process] !stop & !begin1 & cwl=3 & s=0 & k>fThHigh & break -> accu_load3*fd:(s'=1)&(breakDecision'=false)&(k'=newK) + 
								(1-accu_load3*fd):(s'=2)&(breakDecision'=false)&(k'=newK);
	[process] !stop & !begin1 & cwl=3 & s=0 & k>fThHigh & !break -> accu_load3*fd:(s'=1)&(breakDecision'=false) + 
								(1-accu_load3*fd):(s'=2)&(breakDecision'=false);


	// image analysis is bad, UAV need to wait at the waypoint and take another image
	[wait] !stop & s=2 -> (begin'=true) & (begin1'=true) & (s'=0); 

	// if image analysis is good, UAV can continue flying 
	// at check points, operator may suggest route for the UAV

	// w2 -> r5 (c=0) |r6 (c=1) |r7 (c=2)|r9 (c=3)
	[go] !stop & s=1 & w=2 -> risky2:(c'=2) & (begin'=true) & (begin1'=true) & (s'=0) + 
				(1-risky2)/3:(c'=3) & (begin'=true) & (begin1'=true) & (s'=0) +
				(1-risky2)/3:(c'=1) & (begin'=true) & (begin1'=true) & (s'=0) + 
				(1-risky2)/3:(c'=0) & (begin'=true) & (begin1'=true) & (s'=0);
	
	// w5 -> r3 (c=0)| r4  (c=1)| w4 (c=2)
	[go] !stop & s=1 & w=5 -> 1/3:(c'=2) & (begin'=true) & (begin1'=true) & (s'=0) + 1/3:(c'=1) & (begin'=true) & (begin1'=true) & (s'=0) 
			+ 1/3:(c'=0) & (begin'=true) & (begin1'=true) & (s'=0);
	
	// w6 -> r2 (c=0)| r3 (c=1) |r8 (c=2)
	[go] !stop & s=1 & w=6 -> risky6:(c'=2) & (begin'=true) & (begin1'=true) & (s'=0) + 
				(1-risky6)/2:(c'=1) & (begin'=true) & (begin1'=true) & (s'=0) +
				(1-risky6)/2:(c'=0) & (begin'=true) & (begin1'=true) & (s'=0);

	// at non-check-points, UAV has full autonomy to choose flying route
	[go] !stop & s=1 & (w!=2 & w!=5 & w!=6) -> (begin'=true) & (begin1'=true) & (s'=0); 

	// operator stops
//	[] !stop & w1 & w2 & w6 -> (stop'=true);
//	[] !stop & visitAll & done & mission=2 -> (stop'=true);
	[] !stop & visitAll & mission=1 -> (stop'=true);
	[] !stop & visit256 & mission=2 -> (stop'=true);
	[] !stop & visit126 & mission=3 -> (stop'=true);
	[operator_stop] stop -> true;

endmodule


// UAV MODEL, ADAPTED FROM https://www.prismmodelchecker.org/casestudies/human-uav.php
module UAV
	// UAV positions:
	// inside a waypoint: w!=0, a=0, r=0
	// fly through certain angle of a waypoint: w!=0, a!=0, r=0
	// fly through a road point: w=0, a=0, r!=0
	w:[0..6] init 1; // waypoint 
	a:[0..2] init 0; // angle points
	r:[0..9] init 0; // road points
        send: bool init true;
	in: bool init true;
	done: bool init false;
	// flag that a waypoint has been visited
	w1: bool init true;
	w2: bool init false;
	w3: bool init false;
	w4: bool init false;
	w5: bool init false;
	w6: bool init false;
	
	// at any waypoint:
	// send image to human operator for analysis
	[image] w!=0 & a=0 & r=0 & send -> (send'=false); 
	// wait at the waypoint and send another image
	[wait] !send -> (send'=true);
	// fly into a waypoint and take an image
	[camera] w=1 & a!=0 & r=0 & in -> (a'=0) & (send'=true) & (w1'=true);
	[camera] w=2 & a!=0 & r=0 & in -> (a'=0) & (send'=true) & (w2'=true);
	[camera] w=3 & a!=0 & r=0 & in -> (a'=0) & (send'=true) & (w3'=true);
	[camera] w=4 & a!=0 & r=0 & in -> (a'=0) & (send'=true) & (w4'=true);
	[camera] w=5 & a!=0 & r=0 & in -> (a'=0) & (send'=true) & (w5'=true);
	[camera] w=6 & a!=0 & r=0 & in -> (a'=0) & (send'=true) & (w6'=true);

//	[camera] !done & visitAll -> (w2'=false)&(w3'=false)&(w4'=false)&(w5'=false)&(w6'=false)&(done'=true);
	
	// fly out of the waypoint via any angle point
	[go] w!=0 & a=0 & r=0 -> 1/2:(a'=1) & (in'=false) 
			       + 1/2:(a'=2) & (in'=false);


	// UAV flying plans (based on the road map)
	// check points: receiving commands from the operator
	// w2 -> r5 |r6 |r7 |r9
	[fly] c=0 & w=2 & (a!=0) & r=0 & !in -> (r'=5);
	[fly] c=1 & w=2 & (a!=0) & r=0 & !in -> (r'=6);
	[fly] c=2 & w=2 & (a!=0) & r=0 & !in -> (r'=7);
	[fly] c=3 & w=2 & (a!=0) & r=0 & !in -> (r'=9);
	// w5 -> r3 | r4 | w4 (at any angle point)
	[fly] c=0 & w=5 & (a!=0) & r=0 & !in -> (r'=3);
	[fly] c=1 & w=5 & (a!=0) & r=0 & !in -> (r'=4);
	[fly] c=2 & w=5 & (a!=0) & r=0 & !in -> 1/2:(w'=4) & (a'=1) & (r'=0) & (in'=true)
					   + 1/2:(w'=4) & (a'=2) & (r'=0) & (in'=true);
	// w6 -> r2 | r3 |r8
	[fly] c=0 & w=6 & (a!=0) & r=0 & !in -> (r'=2);
	[fly] c=1 & w=6 & (a!=0) & r=0 & !in -> (r'=3);
	[fly] c=2 & w=6 & (a!=0) & r=0 & !in -> (r'=8);

	// non check points: fly autonomy
	// w1 -> r1 | r9
	[fly] w=1 & (a!=0) & r=0 & !in -> (r'=1);
	[fly] w=1 & (a!=0) & r=0 & !in -> (r'=9);
	// w3 -> r6 | w4 (any angle point)
	[fly] w=3 & (a!=0) & r=0 & !in -> (r'=6);
	[fly] w=3 & (a!=0) & r=0 & !in -> 1/2:(w'=4) & (a'=1) & (r'=0) & (in'=true)
				     + 1/2:(w'=4) & (a'=2) & (r'=0) & (in'=true);

	// w4 -> w3 | w5
	[fly] w=4 & (a!=0) & r=0 & !in -> 1/2:(w'=3) & (a'=1) & (r'=0) & (in'=true)
				     + 1/2:(w'=3) & (a'=2) & (r'=0) & (in'=true);

	[fly] w=4 & (a!=0) & r=0 & !in -> 1/2:(w'=5) & (a'=1) & (r'=0) & (in'=true)
				     + 1/2:(w'=5) & (a'=2) & (r'=0) & (in'=true);
	// r1 -> r2 | w1
	[fly] r=1 -> (r'=2);
	[fly] r=1 -> 1/2:(w'=1) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=1) & (a'=2) & (r'=0) & (in'=true);
	// r2 -> r1 | w6
	[fly] r=2 -> (r'=1);
	[fly] r=2 -> 1/2:(w'=6) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=6) & (a'=2) & (r'=0) & (in'=true);
	// r3 -> w5 | w6
	[fly] r=3 -> 1/2:(w'=5) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=5) & (a'=2) & (r'=0) & (in'=true);

	[fly] r=3 -> 1/2:(w'=6) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=6) & (a'=2) & (r'=0) & (in'=true);
	// r4 -> r5 | w5
	[fly] r=4 -> (r'=5);
	[fly] r=4 -> 1/2:(w'=5) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=5) & (a'=2) & (r'=0) & (in'=true);
	// r5 -> r4 | w2
	[fly] r=5 -> (r'=4);
	[fly] r=5 -> 1/2:(w'=2) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=2) & (a'=2) & (r'=0) & (in'=true);
	// r6 -> w2 | w3
	[fly] r=6 -> 1/2:(w'=2) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=2) & (a'=2) & (r'=0) & (in'=true);

	[fly] r=6 -> 1/2:(w'=3) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=3) & (a'=2) & (r'=0) & (in'=true);
	// r7 -> w2 | r8
	[fly] r=7 -> 1/2:(w'=2) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=2) & (a'=2) & (r'=0) & (in'=true);
	[fly] r=7 -> (r'=8);
	// r8 -> w6 | r7
	[fly] r=8 -> 1/2:(w'=6) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=6) & (a'=2) & (r'=0) & (in'=true);
	[fly] r=8 -> (r'=7);
	// r9 -> w1 | w2
	[fly] r=9 -> 1/2:(w'=1) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=1) & (a'=2) & (r'=0) & (in'=true);

	[fly] r=9 -> 1/2:(w'=2) & (a'=1) & (r'=0) & (in'=true)
		+ 1/2:(w'=2) & (a'=2) & (r'=0) & (in'=true);

endmodule

rewards "accuLoad" // for testing any parameter value
	[process] cwl=1: accu_load1;
	[process] cwl=2: accu_load2;
	[process] cwl=3: accu_load3;
endrewards
rewards "bd" // for testing any parameter value
        [process] true: breakDiscount;
endrewards
rewards "fd" // for testing any parameter value
        [process] true: fd;
endrewards
rewards "goodAnalysis" // number of good image analysis
        [go] true: 1;
endrewards
rewards "badAnalysis" // number of bad image analysis
        [wait] true: 1;
endrewards
rewards "time" // flight time
	[wait] break: breakWaitTime;
        [wait] !break: nonBreakWaitTime;
//	[wait] true: 10;
        [fly] true: flyTime;
endrewards
rewards "ROZ" // ROZ occupancy
	[fly] roz : 1;
endrewards


